{"version":3,"sources":["components/Message.jsx","components/Messages.jsx","components/Users.jsx","components/Login.jsx","components/InputBox.jsx","App.js","index.js"],"names":["Message","messageText","className","socketid","_uniqueId","socket","io","Messages","useState","messages","setMessages","useEffect","emit","on","username","messageList","id","map","message","Users","users","setUsers","user","submitCredentials","route","password","toSend","JSON","stringify","console","log","fetch","method","headers","body","then","res","json","Login","setUsername","setPassword","registerUsername","setRegisterUsername","registerPassword","setRegisterPassword","history","useHistory","handleLogin","e","a","preventDefault","alert","push","window","location","reload","handleRegister","type","placeholder","value","onChange","target","onClick","InputBox","input","setInput","onSubmit","name","autoComplete","App","Cookies","get","path","exact","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dbadd7b4.chunk.js","sourcesContent":["import React from \"react\";\nimport './Message.css'\nimport _uniqueId from 'lodash/uniqueId'; //let's see if this is \n\nconst Message = ({\n  messageText,\n  className,\n  socketid,\n}) => {\n\n  // id = \"messages\"\n  //   class = \"message\"\n  //     class = \"notice\"\n  //   class = \"message own\"\n  //     class = \"messageLabel\"\n  //     class = \"messageText\"\n  //   class = \"message other\"\n  //     class = \"messageText\"\n  \n  if (className === 'message other') {\n    return (\n      <li className={className} key={_uniqueId()}>\n        <div className=\"messageLabel\">{socketid}</div>\n        <div className=\"messageText\"> {messageText} </div>\n      </li>\n    );\n  } else if (className === 'message own') {\n    return <li className={className} key={_uniqueId()}> <div className=\"messageText\">{messageText}</div> </li>;\n  } else {\n    return <li className=\"message\" key={_uniqueId()}><div className=\"notice\">{messageText}</div></li>;\n  }\n\n\n}\n\nexport default Message;","import React, { useEffect, useState } from \"react\";\nimport './Messages.css';\nimport Message from \"./Message\";\nimport { io } from \"socket.io-client\";\nexport const socket = io('ws://localhost:3000'); \n//if we didn't go through proxy (instead localhost:3001 - i.e server), it messes up the sesssions  - separate session created for the socket.io, \n//so we're never able to access the user object which is created on register (so regular route)\n\nconst Messages = () => {\n  \n  const [messages, setMessages] = useState([]); \n  \n\n  //we might be in trouble if the socket disconnects in this element, since the listeners are only attached once, upon render\n  useEffect(() => {\n    \n    socket.emit('enteredChat');\n    socket.on('new message', ({className, messageText, username }) => {\n      setMessages(messages => [...messages, {className, messageText, username}]);\n    });\n\n    socket.on('updateMessageList', messageList => {\n      setMessages(messageList);\n    })\n  }, []);\n\n\n  return(\n    <ul id=\"messages\">  \n      {messages.map(message => {\n        return <Message messageText={message.messageText} className={message.className} username={message.username} />;\n      })}\n    </ul>\n  );\n}\n\nexport default Messages;\n","import React, { useState, useEffect }  from \"react\";\nimport './Users.css';\n// import { socket } from \"../App\";\nimport { socket } from \"./Messages\";\n\nconst Users = () => {\n  const [users, setUsers] = useState([]);\n\n  useEffect(() => {\n    socket.on('updateUserList', (users) => {\n      setUsers(users);\n    });\n  }, []);\n\n  if (users) {\n    return (\n    <ul id=\"users\">\n      {users.map(user => {\n        return <li className=\"user\" key={user.id}>{user.username}</li>\n      })}\n    </ul>\n   );\n  }\n  \n}\n\nexport default Users;","import React, { useEffect, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport './Login.css';\nimport Cookies from \"js-cookie\";\nimport { socket } from './Messages'; // does this run the code in messages everytime it's imported?\n\nconst submitCredentials = (route, username, password) => {\n  const toSend = JSON.stringify({username, password});\n  console.log(`toSend: ${toSend}`)\n  return fetch('http://localhost:3000'+ route, { \n    //important for the port to be the same as the client sending when using proxy\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      // withCredentials: true, //in order to be able to save cookies from the response (?)\n    },\n    body: toSend //could this be a problem at the receiving end?\n  }).then(res => res.json()); //either true or false \n}\n\nconst Login = () => {\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const [registerUsername, setRegisterUsername] = useState('');\n  const [registerPassword, setRegisterPassword] = useState('');\n  const history = useHistory();\n\n  //immediate logout request upon login\n  useEffect(() => {\n    const response = fetch('/logout', {\n      method: 'POST',\n    })\n    // if (response) { \n    //   Cookies.remove('connect.sid');\n    //   console.log('Client: removed cookie'); \n    // }; \n    //apparently can't put fetch(...).then(Cookies.remove('connect.sid'));\n    //because that will prematurely log us off on the server for some reason\n  }, []); //[] means once upon load?\n\n\n  // Delete either username & password or registerUsername & registerPassword if the\n  // user starts typin in other fields.\n  useEffect(() => {\n    if (registerUsername || registerPassword) {\n      setUsername('');\n      setPassword('');   \n    }\n    if (username || password) {\n      setRegisterUsername('');\n      setRegisterPassword('');\n    }\n  },[username, password, registerUsername, registerPassword])\n\n  const handleLogin = async (e) => {\n    e.preventDefault();\n    const auth = await submitCredentials('/loginUser', username, password);\n    if (auth) {\n      alert('Login successful');\n      history.push('/');\n      window.location.reload(); //interesting that it doesn't work the other way around (i.e history push after reload)\n    } else {\n      alert('Login unsuccessful');\n      // TODO: Alert temporarily appearing on the bottom informing the user\n      // if the attempt was successful or unsuccessful. \n    }\n\n    setUsername('');\n    setPassword('');\n  }\n\n  const handleRegister = async (e) => {\n    e.preventDefault();\n    if (registerUsername === '' || registerPassword === '') {\n      // TODO: again have this as a temporary message box\n      alert('All fields are required');\n      return;\n    }\n    \n    const token = await submitCredentials('/registerUser', registerUsername, registerPassword);\n    if (token) {\n      alert('Register successful');\n      history.push('/');\n      window.location.reload();\n    } else {\n      // The client should probably not be assuming that 'user exists'\n      // Simply because the request was rejected?\n      alert('User already exists. Register unsuccessful 1');\n    }\n    setRegisterUsername('');\n    setRegisterPassword('');\n  }\n\n  return (\n    <>\n      <div className='vertical-bar'></div>\n      <form id='login'>\n        <div className='separator'>Sign up</div>\n          <input type='text' className='login-input' placeholder='Username' value={registerUsername} onChange={(e) => setRegisterUsername(e.target.value)} />\n\n          <input type='password' className='login-input' placeholder='Password' value={registerPassword} onChange={(e) => setRegisterPassword(e.target.value)} />\n\n          <input type='password' className='login-input' placeholder='Confirm Password'  />\n          \n          <button className='login-button' onClick={handleRegister}>Sign up</button>\n\n        <div className='separator'>Log in (no password for guest)</div>\n\n          <input type='text' className='login-input' placeholder='Username' value={username}  onChange={(e) => setUsername(e.target.value)} />\n\n          <input type='password' className='login-input' placeholder='Password' value={password} onChange={(e) => setPassword(e.target.value)} />\n\n          <button className='login-button' onClick={handleLogin}>Sign in</button>\n      </form>\n\n      <div className='vertical-bar'></div>\n    </>\n  )\n}\n\nexport default Login;\n","import React, { useState } from \"react\";\nimport './InputBox.css';\nimport { socket } from \"./Messages\";\nimport { FaPaperPlane } from \"react-icons/fa\";\n\nconst InputBox = () => {\n\n  const [input, setInput] = useState('');\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (input) {\n      socket.emit('new message', input);\n      setInput('');\n    }\n  }\n\n  return (\n    <form id=\"form\" onSubmit={handleSubmit}>\n      {/* <form id=\"form\" action=\"\">  */}\n      <input name=\"message\"\n        id=\"input\"\n        autoComplete=\"off\"\n        value={input}\n        onChange={e => setInput(e.target.value)} />\n      <button id='message-button'><FaPaperPlane /></button>\n    </form>\n  );\n}\n\nexport default InputBox;","import React, { useEffect } from 'react';\nimport { BrowserRouter as Router, Route, useHistory } from 'react-router-dom';\nimport Users from \"./components/Users\";\nimport Login from './components/Login';\nimport Messages from \"./components/Messages\";\nimport InputBox from './components/InputBox';\n// import { io } from \"socket.io-client\";\nimport './App.css';\nimport Cookies from 'js-cookie';\n\n//can i defer this somehow? I don't want to connect to socket on the login page\n// export const socket = io('ws://localhost:3001'); //what if we changed this to localhost:3000 - would we be able to remove the cors from the server?\n// YES -> don't use the socket here\nconst App = () => {\n    //check for the cookie in the browser and redirect to login?\n  const history = useHistory();\n\n  if (!Cookies.get('connect.sid')) { \n    //TODO: need to change this implemenation badly (shouldn't rely on disabled http-only)\n    console.log('no cookie so serving login')\n    history.push('/login');\n  }\n  \n  return (\n    <>\n    <Router>\n      <Route path=\"/login\">\n        <div className=\"sidebar\"></div>\n        <div className=\"content\">\n          {/* <div className=\"bar\"></div> */}\n          <Login />\n          {/* <div className=\"bar\"></div> */}\n        </div>\n        <div className=\"sidebar\"></div>\n      </Route>\n      <Route exact path=\"/\">\n        <div className=\"sidebar\" id=\"user-sidebar\">\n          <Users />\n        </div>\n        <div className=\"content\">\n          <Messages />\n          <InputBox />\n        </div>\n        <div className=\"sidebar\"></div>\n      </Route>\n    </Router>\n      \n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n    <BrowserRouter>\n        <React.StrictMode>\n            <App />\n        </React.StrictMode>\n    </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}